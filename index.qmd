---
title: "Introduction to R Programming <br/><br/><br/><br/><br/>"
title-slide-attributes:
    data-background-image: images/lts_logo.jpg
    data-background-size: "30%"
    data-background-opacity: "0.90"
    data-background-position: "50% 45%"
format:
   revealjs:
     theme: [dark, custom.scss]
     code-fold: false
     slide-number: c
     controls: true
     css: custom.css
     menu: {
      side: 'left',
      numbers: true,
      markers: true,
      width: 'normal',
      hideMissingTitles: true,
      titleSelector: ''}
preview-links: auto
---

## About this presentation {data-menu-title="About"}
-   This seminar is the first in a series on [**R programming**]{style="color:#edea2b"}.

-   It's targeted at people that have little to no programming experience.

::: fragment
-   By the end of this presentation, you should know about...

    1.  R and RStudio
    2.  Objects and functions
        - Different data types and structures
    3.  R Environment
        - Working directory
        - Assign objects and apply functions
        - Read ([tidy]{style="color:#edea2b"}) data
:::

::: fragment
-   Raw code available on [Github](https://github.com/jeremymack-LU/rprogramming/blob/main/index.qmd)
:::

![](images/rlang_hex.png){.absolute bottom="0" right="0" width="170"}
![](images/rstudio_hex.png){.absolute bottom="0" right="175" width="170"}
![](images/tidyverse_hex.png){.absolute bottom="0" right="350" width="170"}

## Programming in R {data-menu-title="R roller coaster"}

<p>

<a href="https://allisonhorst.com/"> <img src="./images/r_rollercoaster.png" alt="Picture of learning R graph" height="100%" width="100%"/> </a>

</p>

## Structure of the presentation {data-menu-title="Presentation outline"}

The presentation is split into eight topics:

::: fragment
-   Topic 1:    [**What**]{style="color:#edea2b"} is R (and RStudio)?

-   Topic 2:    [**Why**]{style="color:#edea2b"} use R (and RStudio)?

-   Topic 3:    [**How**]{style="color:#edea2b"} do I get R (and RStudio)?

-   Topic 4:    Working with R in RStudio

    -   User Interface and R Environment
:::

::: fragment
-   Topic 5:    Objects in R

    -   Data Types and Structures
    
-   Topic 6:    Functions (and Packages) in R

-   Topic 7:    Data in R
:::

::: fragment
-   Topic 8:    Additional Resources
:::

![](images/r_learners.png){.absolute bottom="0" right="0" width="50%" height="50%"}

# Topic 1 {data-menu-title="Topic 1"}

[[**What**]{style="color:#edea2b"} is R (and RStudio)?]{style="font-size: 1.5em; text-align: center"}

## [**What**]{style="color:#edea2b"} is R? {data-menu-title="What is R"}

::: columns
::: {.column width="65%"}
-   R is a **programming language** ([one of many](https://www.tiobe.com/tiobe-index/)) and an **environment** for statistical computing.

::: fragment
-   Developed by Ross Ihaka and Robert Gentleman 30 years ago; now maintained by a core team supported by the [R Foundation](https://www.r-project.org/foundation/).
:::

::: fragment
-   Dialect of the S language (S-Plus)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
<center>

![](images/R_logo.png){width="90%"}

</center>
:::
:::

::: fragment
-   R Development Timeline:

![](images/timeline.jpeg){width="100%"}
:::

## [**What**]{style="color:#edea2b"} is RStudio? {data-menu-title="What is RStudio"}

::: columns
::: {.column width="65%"}
-   RStudio is an **Integrated Development Environment** (IDE), or a front end platform to run R.

::: fragment
-   Developed by [Posit](https://posit.co/), a company that develops free and open tools for R, and enterprise-ready professional products.
:::

::: fragment
-   Open source tools for R:

    -   [RStudio](https://posit.co/products/open-source/rstudio/) IDE
    -   Data science packages ([tidyverse](https://www.tidyverse.org/), [tidymodels](https://www.tidymodels.org/), [ggplot2](https://ggplot2.tidyverse.org))
    -   Web application platform ([Shiny](https://shiny.rstudio.com/))
    -   Scientific and technical publishing platform ([Quarto](https://quarto.org/))
    -   Web servers ([Shiny server](https://posit.co/products/open-source/shinyserver/))
:::
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
<center>

![](images/rstudio_hex.png){width="90%"}

</center>
:::
:::

# Topic 2 {data-menu-title="Topic 2"}

[[**Why**]{style="color:#edea2b"} use R (and RStudio)?]{style="font-size: 1.5em; text-align: center"}

## [**Why**]{style="color:#edea2b"} use R? {data-menu-title="Why use R"}

::: columns
::: {.column width="65%"}
-   Open source and **free**!

::: fragment
-   Available on most platforms/OS
:::

::: fragment
-   Very active development community

    -   CRAN: The **C**omprehensive **R** **A**rchive **N**etwork
    -   User contributed extension packages (\>19,000)
:::
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
<center>

![](images/R_logo.png){width="90%"}

</center>
:::

::: {.fragment .fade-in-then-out}
![](images/r_community.png){.absolute top="5%" right="0%" width="40%"}
:::

::: fragment
-   **Reproducibility**
:::

::: fragment
![](images/reproducibility.png){.absolute top="5%" right="0%" width="40%"} ![](images/reproducibility3.png){.absolute top="50%" right="0%" width="40%"}
:::
:::

## [**Why**]{style="color:#edea2b"} use RStudio? {data-menu-title="Why use RStudio"}

::: columns
::: {.column width="65%"}
-   Like R, it's open source and **free**!

::: fragment
-   It can reduce the learning curve of R, by creating **organization**.
:::

::: fragment
-   Integrates nicely with other features and applications that can be used with R, especially those that increase reproducibility:

    -   RStudio Projects
    -   Version control and tracking
    -   R Markdown
    -   ShinyApps
:::
:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
<center>

![](images/rstudio_hex.png){width="90%"}

</center>
:::
:::

## [**How**]{style="color:#edea2b"} do R and RStudio work together? {data-menu-title="Car analogy"}

Consider a car analogy.

::: {.columns .fragment}
::: {.column width="55%"}
**R - the engine**

-   R runs things under the hood - it's the enginge that allows the car to drive.

**RStudio - the body**

-   RStudio provides a frame that keeps things organized and finishings that make it visually appealing.
:::

::: {.column width="1%"}
:::

::: {.column width="44%"}
<center>

![](images/car_engine.jpg){width="90%"}

</center>
:::
:::

::: fragment
[\* You need R to run RStudio, but not RStudio to run R.]{style="color:#edea2b"}
:::

# Topic 3 {data-menu-title="Topic 3"}

[[**How**]{style="color:#edea2b"} do I get R (and RStudio)?]{style="font-size: 1.5em; text-align: center"}

## Topic 3: [**How**]{style="color:#edea2b"} do I get R (and RStudio)? {data-menu-title="How do I get R (and RStudio)"}

-   Download and local install:
    -   You can download R from the [R Project website](https://www.r-project.org/).
    -   You can download RStudio from the [Posit website](https://posit.co/download/rstudio-desktop/).

::: fragment
-   Run R and RStudio from LUapps:
    -   [LUapps](https://lts.lehigh.edu/luapps-powered-aws) is a virtual environment hosted by AWS.
    -   Accessed through a web browser (No VPN required).
    -   Both R and RStudio are located in the [**Common Environment**]{style="color:#edea2b"}

<left>![](images/luapps.png){height="250"}     ![](images/luapps2.png){height="250"}</left>
:::

## Review - R and RStudio: {data-background="#000000" data-menu-title="Review 1"}

::: incremental
-   [**R**]{style="color:#edea2b"} is a programming language initially built for statistical computing ("Engine").

-   [**RStudio**]{style="color:#edea2b"} is an integrated development environment that makes working with R easier ("Body").

-   Both R and RStudio, are [**free and open source programs**]{style="color:#edea2b"} that can increase workflow [**reproducibility**]{style="color:#edea2b"}.

-   Both R and RStudio, can be downloaded and installed locally, or run in a virtual environment through [LUapps]{style="color:#edea2b"}.
:::

![](https://www.rstudio.com/wp-content/uploads/2018/10/RStudio-Logo-White.png){.absolute bottom="0" right="0" width="50%"}

# Topic 4 {data-menu-title="Topic 4"}

[Working with R in RStudio]{style="font-size: 1.5em; text-align: center"}

## Topic 4: Working with R in RStudio {data-menu-title="R in RStudio"}

<p>

<center>

<img src="./images/r_ui.png" width="80%"/>

</center>

</p>

::: {.absolute top="45" left="0" width="100%"}
::: fragment
<p>

<center>

<a href="https://lts.lehigh.edu/luapps-powered-aws/"> <img src="./images/rstudio.png" width="80%"/> </a>

</center>

</p>
:::
:::

## Review - R in RStudio: {data-background="#000000" data-menu-title="Review 2"}

::: fragment
-   RStudio IDE:

    - Four main windows that create organization
    - Customizeable
:::

::: {.absolute top="45" left="0" width="100%"}
::: {.fragment .fade-in-then-out}
<p>

<center>

<img src="./images/rstudio2.png" width="80%"/>

</center>

</p>
:::
:::

::: fragment
-   Basic things to remember about R:
    
    - The [working directory]{style="color:#edea2b"} is where R will look for things (by default).
    - R is [case-sensitive]{style="color:#edea2b"}.
    - R is a calculator.
    - R can be used to store ([assignments]{style="color:#edea2b"}) one or more values ([concatenation]{style="color:#edea2b"}) as objects.
:::

# Topic 5 {data-menu-title="Topic 5"}

[Objects in R]{style="font-size: 1.5em; text-align: center"}

## Topic 5: Objects in R {data-menu-title="Objects in R"}

-   R largely revolves around two things: [**objects**]{style="color:#edea2b"} and [**functions**]{style="color:#edea2b"}.

<center><b>Define objects > Apply functions > Repeat!</b></center>

. . .

<br/>

-   For example, we defined an object called "n":

```{r}
#| echo: true
#| eval: true
n <- c(2, 3, 5, 8, 13, 21, 34, 55)
```

. . .

-   We can then apply a function to our object. Lets say we're interested in the average, so we'll apply the `mean` function:

```{r}
#| echo: true
#| eval: true
avg.n <- mean(n)
avg.n
```

## Topic 5: Objects in R {data-menu-title="Object types"}
-   Objects come in many different shapes and sizes - like a number, a dataset, or the results of a statistical test.

-   Objects are essentially data that have a particular [**type**]{style="color:#edea2b"} and [**structure**]{style="color:#edea2b"}.

::: {.fragment .fade-in-then-out fragment-index=1}
-   There are six basic [**type**]{style="color:#edea2b"} (classes) of data in R:

    1. Logical
    2. Double
    3. Integer
    4. Complex
    5. Character
    6. Factors - special case of Integer with Character labels
:::

::: {.absolute top="180" left="0" width="100%"}
::: {.fragment fragment-index=2}
::: panel-tabset
### Logical
Objects often created via comparison(s)
```{r}
#| echo: true
#| eval: true
x <- 1; y <- 2          # Create objects x and y
z <- x > y              # Is x larger than y? 
z                       # Print the logical value
```

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
typeof(z)               # Print the data type of z
```
:::

### Double*
Numbers, often approximated; default data type in R*
```{r}
#| echo: true
#| eval: true
x <- 10.5               # Define object x
x                       # Print x
```

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
typeof(x)               # Print the data type of x
```
:::

### Integer
Whole numbers; a number that is not a fraction
```{r}
#| echo: true
#| eval: true
x <- 10                             # Define object x
x                                   # Print x
```

::: {.fragment fragment-index=3}
```{r}
#| echo: true
#| eval: true
typeof(x)                           # Print the data type of x
```
:::

::: {.fragment fragment-index=4}
```{r}
#| echo: true
#| eval: true
y <- as.integer(10)                 # Declare as integer
z <- 10L                            # Declare as integer by appending with "L"
c(typeof(x),typeof(y),typeof(z))    # Print the data type of x
```
:::

### Complex
Any number that can be written as a + bi, where i is the imaginary unit and a and b are real numbers
```{r}
#| echo: true
#| eval: true
x <- 1 + 2i             # Create a complex number x
x                       # Print the value of x
```

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
typeof(x)               # Print the data type of x
```
:::

### Character
Used to represent string values in R
```{r}
#| echo: true
#| eval: true
name <- "Jeremy Mack"         # Assign character string
name                          # Print the character string
```

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
x <- as.character(3.14)       # Declare number as character string
y <- "3.14"                   # Declare as character with " "
c(x,y)                        # Print the character strings
```
:::

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
c(typeof(x),typeof(y))        # Print the data type of x
```
:::

### Factor
Fixed set of possible values (categorical variables); displayed as characters stored as integers
```{r}
#| echo: true
#| eval: true
x <- c("A","B","C","D")       # Create a vector of factor levels
x <- as.factor(x)             # Declare as factor
x                             # Print the value of x
```

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
typeof(x)                     # Print the data type of x
```
:::

::: {.fragment fragment-index=2}
```{r}
#| echo: true
#| eval: true
str(x)                        # Print the structure of x
```
:::

:::
:::
:::

## Topic 5: Objects in R {data-menu-title="Object structures"}
-   Objects come in many different shapes and sizes - like a number, a dataset, or the results of a statistical test.

-   Objects are essentially data that have a particular [**type**]{style="color:#edea2b"} and [**structure**]{style="color:#edea2b"}.

::: {.fragment .fade-in-then-out fragment-index=1}
-   There are four basic [**structures**]{style="color:#edea2b"} of data in R:

    1. Scalar
    2. Vector
    3. Matrix
    4. Data frame (and Tibble)
:::

::: {.fragment .fade-in fragment-index=2}
::: {.absolute top="180" left="0" width="100%"}
::: panel-tabset
### Scalar
::: columns
::: {.column width="50%"}
![](images/objects2.png)
:::
::: {.column width="1%"}
:::
::: {.column width="49%"}
-   **Scalar objects:**

    1. Hold only one value at a time
    2. Can be used to build more complex objects

::: fragment  
```{r}
#| echo: true
#| eval: true
x <- 10.5 
str(x)
```
:::    
:::
:::
### Vector
::: columns
::: {.column width="50%"}
![](images/objects3.png)
:::
::: {.column width="1%"}
:::
::: {.column width="49%"}
-   **Vector objects:**

    1. Hold several values stored as a single object
    2. Either numeric or character (not both!)

::: fragment  
```{r}
#| echo: true
#| eval: true
n1 <- c(2,3,5,8,13,21,34,55)
n2 <- c(2,3,5,8,13,21,34,"55")
str(n1)
str(n2)
```
:::
:::
:::
### Matrix
::: columns
::: {.column width="50%"}
![](images/objects4.png)
:::
::: {.column width="1%"}
:::
::: {.column width="49%"}
-   **Matrix objects:**
  
    1. Large data structure
    2. Has 2-dimensions, representing its height (rows) and width (columns)
    3. Either numeric or character (not both!)

::: fragment
```{r}
#| echo: true
#| eval: true
x <- 1:5; y <- 6:10; z <- 11:15
m <- cbind(x,y,z)
str(m)
```
:::
:::
:::
### Data frame
::: columns
::: {.column width="50%"}
![](images/objects4.png)
:::
::: {.column width="1%"}
:::
::: {.column width="49%"}
-   **Data frame objects:**

    1. Large data structure
    2. Has 2-dimensions, representing its height (rows) and width (columns)
    3. Can be a mix of data types

::: fragment
```{r}
#| echo: true
#| eval: true
survey <- data.frame(
"survey id"  = c(1,2,3,4,5),
"sex" = c("m","m","m","f","f"),
"age" = c(99,46,23,54,23))
str(survey)
```
:::  
:::
:::
### Tibble
::: columns
::: {.column width="50%"}
![](images/objects4.png)
:::
::: {.column width="1%"}
:::
::: {.column width="49%"}
-   **Tibble objects ("Lazy" data frames:**

    1. Large data structure
    2. Has 2-dimensions, representing its height (rows) and width (columns)
    3. Can be a mix of data types
    
::: fragment
```{r}
#| echo: true
#| eval: true
library(tibble)
survey <- tibble(
"survey id"  = c(1,2,3,4,5),
"sex" = c("m","m","m","f","f"),
"age" = c(99,46,23,54,23))
str(survey)
```
::: 
:::
:::
:::
:::
:::

# Topic 7 {data-menu-title="Topic 7"}

[Data in R]{style="font-size: 1.5em; text-align: center"}

## Topic 7: Data in R {data-menu-title="Tidy data"}

<p>

<img src="./images/tidydata.jpg" alt="Picture of tidy data" height="100%" width="100%"/>

</p>

## Topic 7: Data in R {data-menu-title="Data in R"}
-   Data are read into R and stored as objects

::: fragment
-   Read `functions` selected based on the type of file being read
:::

::: fragment
-   Reading can be done programmatically, or with the RStudio IDE

::: panel-tabset
### Programmatically
```{r}
#| echo: true
#| eval: false
# base package options (reads to a data frame)
read.table()           # Reads tabular data
read.csv()             # Reads comma separated files
read.delim()           # Reads tab separated files

# readr package options (reads to a tibble)
read_table()           # Reads tabular data
read_csv()             # Reads comma separated files
read_delim()           # Reads tab separated files

# readxl package options (reads to a tibble)
read_xlsx()            # Reads .xlsx files
read_xls()             # Reads .xls files
```
### RStudio IDE
::: columns
::: {.column width="50%"}
![](images/environment1.png){height=350}
:::
::: {.column width="50%"}
![](images/environment2.png){height=350}
:::
:::
:::
:::

## Topic 7: Data in R {data-menu-title="Reading in data"}
-   Let's practice reading data into R:

```{r}
#| echo: true
#| eval: false
# Load the file mpg.csv in the data folder to an object called df
# Relative path to file
df <- read.csv('data/mpg.csv')

# Absolute path to file
df <- read.csv('C:/Users/jsm4/Desktop/r_introduction/data/mpg.csv')
```

::: fragment
-   Next, print the first few rows with the `head` function:

```{r}
#| echo: true
#| eval: false
head(df)
```

```{r}
#| echo: false
#| eval: true
head(mtcars)
```
:::

## Topic 7: Data in R {data-menu-title="Reading in data"}
-   Let's use our df object to see how R references data

-   R can reference data by value (cell), variable (column), or observation (row)

::: panel-tabset
### Value
-   Using brackets, R reads values as row by column, or [[row,column]]{style="color:#edea2b"}
```{r}
#| echo: false
#| eval: true
df <- mtcars
```

```{r}
#| echo: true
#| eval: true
df[1,1]             # print value in row 1, column 1
df[6,10]            # print value in row 6, column 10
```

### Variable
-   Variables can be referenced as [object name]{style="color:#edea2b"}`$`[variable name]{style="color:#edea2b"}, or in brackets by name or index
```{r}
#| echo: true
#| eval: true
df$mpg                  # print mpg variable
mtcars[,'mpg']          # print mpg variable by name
mtcars[,1]              # print mpg variable by index number
```
### Observation
-   Observations can be referenced in brackets by name (*if row names are present*), or index
```{r}
#| echo: true
#| eval: true
df[1,]                  # print first row
df['Mazda RX4 Wag',]    # print data for Mazda RX4 Wag
df[c(1,5),]             # print first and fifth row
```

:::

## Topic 7: Data in R {data-menu-title="Reading in data"}
-   Packages often come with pre-loaded data

-   For example, the `datasets` package comes with 104 pre-loaded datasets

::: {.absolute top="160" left="0"}
::: {.fragment .fade-in-then-out}
-   Let's use the `mtcars` dataset to see how R refers to data:
    
    -   R reads data as row by column, using brackets

```{r}
#| echo: true
#| eval: true
mtcars[6,10]            # print value in row 6, column 10
```

:::
:::

::: {.absolute top="160" left="0"}
::: {.fragment .fade-in-then-out}
-   Let's use the `mtcars` dataset to see how R refers to data:

    -   R reads data as row by column, using brackets
    -   Variables (columns) can be referenced as [object name]{style="color:#edea2b"}`$`[variable name]{style="color:#edea2b"}

```{r}
#| echo: true
#| eval: true
mtcars$mpg              # print mpg variable
```

:::
:::

::: {.absolute top="160" left="0"}
::: {.fragment .fade-in-then-out}
-   Let's use the `mtcars` dataset to see how R refers to data:

    -   R reads data as row by column, using brackets
    -   Variables (columns) can be referenced as [object name]{style="color:#edea2b"}`$`[variable name]{style="color:#edea2b"}
    -   Variables can also be referenced in brackets by name, or index number

```{r}
#| echo: true
#| eval: true
mtcars[,'mpg']          # print mpg variable by name
mtcars[,1]              # print mpg variable by index number
```

:::
:::

::: {.absolute top="160" left="0"}
::: {.fragment .fade-in-then-out}
-   Let's use the `mtcars` dataset to see how R refers to data:

    -   R reads data as row by column, using brackets
    -   Variables (columns) can be referenced as [object name]{style="color:#edea2b"}`$`[variable name]{style="color:#edea2b"}
    -   Variables can also be referenced in brackets by name, or index number
    -   Observations (rows) can be referenced in brackets by name (*if row names are present*),</br> or index number

```{r}
#| echo: true
#| eval: true
mtcars[c(1,5),]         # print the first and fifth row
mtcars['Mazda RX4',]    # print data for Mazda RX4
```

:::
:::

## Review - Data in R: {data-background="#000000" data-menu-title="Review 4 - Data"}

-   Data are read into R with file specific functions (e.g. `read.csv` or `read_xlsx`).

![](images/tidydata.jpg){.absolute bottom="0" right="0" height="250"}

::: fragment
-   R packages also come with pre-loaded datasets.
:::

::: fragment
-   R identifies data by row ([observation]{style="color:#edea2b"}) then column ([variable]{style="color:#edea2b"}).

    -   Both rows and columns can be referenced by index number, </br>or name (if one is present), using brackets
    -   Columns can also be referenced as [object name]{style="color:#edea2b"}`$`[variable name]{style="color:#edea2b"} (mtcars$mpg)
:::

::: fragment
-   Remember the concept of "Tidy Data"
:::

::: fragment
![](images/tidydata3.jpg){.absolute bottom="0" right="0" height="35%"}
:::

# Topic 6 {data-menu-title="Topic 6"}

[Functions (and Packages) in R]{style="font-size: 1.5em; text-align: center"}

## Topic 6: Functions in R {data-menu-title="Functions in R"}

-   R largely revolves around two things: [**objects**]{style="color:#edea2b"} and [**functions**]{style="color:#edea2b"}.

<center><b>Define objects > Apply functions > Repeat!</b></center>

<br/>

. . .

-   For example, we defined an object called "n":

```{r}
#| echo: true
#| eval: true
n <- c(2, 3, 5, 8, 13, 21, 34, 55)
```

-   We can then apply a function to our object. Lets say we're interested in the average, so we'll apply the `mean` function:

```{r}
#| echo: true
#| eval: true
avg.n <- mean(n)
avg.n
```

## Topic 6: Functions in R {data-menu-title="Recipes"}
-   [Functions]{style="color:#edea2b"} are procedures that typically take one or more objects as [arguments]{style="color:#edea2b"} (i.e., inputs), does something with them, then returns a new object (i.e., result).

![](images/recipe.png){.absolute bottom="0" right="0" height="40%"}

::: fragment
-   Cooking analogy:
      
    - Functions (recipe) + Arguments (ingredients) = Result (meal)
:::    

::: fragment
-   Arguments (ingredients):

    - Can be required, optional, or set by default
    - Do not need to be assigned by argument name, if specified in order (recipe)
:::    

::: fragment
::: columns
::: column
-   For example, lets consider the `split` function:

```{r}
#| echo: true
#| eval: true
args(split)     # Display argument names
```
:::
:::
:::

## Topic 6: Functions in R {data-menu-title="User-defined functions"}
-   There are two basic types of functions in R:

    1. User-defined functions

::: fragment
```{r}
#| echo: true
#| eval: true
ages     <- c(99,46,23,54,23)

age_mean <- function(x) {
    summation <- sum(x)
    summation / length(x)
}

age_mean(ages)
```
:::

## Topic 6: Functions in R {data-menu-title="Packages"}
-   There are two basic types of functions in R:

    1. User-defined functions
    2. Built-in functions that are loaded via [Packages]{style="color:#edea2b"} (Community development!)

![](images/r_packages.png){.absolute bottom="0" right="0" height="50%"}

## Topic 6: Functions in R {data-menu-title="Community development"}
-   Packages in R:

    - R packages are used to install built-in functions into the R Environment.
    - R packages also include data sets, help documentation, and how-to examples (i.e., vignette).
    - R packages [**extend the functionality**]{style="color:#edea2b"} of base R.

![](images/r_packages.png){.absolute bottom="0" right="0" height="50%"}

::: fragment
-   When you install R for the first time, you are installing `base R`, which includes functions written by the original authors of the R language.
:::

::: fragment
-   Additional packages are developed by the [R community](https://cran.case.edu/).
:::

::: fragment
-   How do we get packages loaded into R?
:::

## Topic 6: Functions in R {data-menu-title="Loading packages"}
-   How do we get packages loaded into R?

-   Two step process:

    1. [Install]{style="color:#edea2b"} the package - do this once with `install.packages` function
    2. [Load]{style="color:#edea2b"} the package into R - do this every time with `library` function

::: fragment
::: panel-tabset
### Programmatically
```{r}
#| echo: true
#| eval: false
# Traditional methods
install.packages("ggplot2")      # Install - quotes are necessary
install.packages("dplyr")
library(ggplot2)                 # Load into R environment - quotes are optional
library(dplyr)

# More efficient way
install.packages("pacman")       # Install pacman package
library(pacman)                  # Load into R environment
p_load(ggplot2, dplyr)           # Use p_load function to install and load multiple packages
```
### RStudio IDE
::: columns
::: {.column width="50%"}
![](images/explorer1.png){height=350}
:::
::: {.column width="50%"}
![](images/explorer2.png){height=350}
:::
:::
:::
:::

## Topic 6: Functions in R {data-menu-title="Tidyverse"}
-   [Tidyverse]{style="color:#edea2b"} - collection of R packages for data science
![](images/tidyverse.png){.absolute bottom="-10" right="275" height="50%"} ![](images/tidyverse2.png){.absolute bottom="0" right="0" height="50%"}

. . .

-   Underlying design philosophy, grammar, and data structures

. . .

-   [Supported by RStudio](https://www.tidyverse.org)

## Topic 6: Functions in R {data-menu-title="Data process"}

::: {.r-stack}
![](images/tidy1.png)

![](images/tidy2.png){.fragment}

![](images/tidy3.png){.fragment}
:::

## Topic 6: Functions in R {data-menu-title="Tidyverse install"}
-   Tidyverse packages can be installed and loaded individually:

```{r}
#| echo: true
#| eval: false
# Install and load individual Tidyverse packages
install.packages("dplyr"); library(dplyr)         # Install and load dplyr
install.packages("ggplot2"); library (ggplot2)    # Install and load ggplot
install.packages("readr"); library(readr)         # Install and load readr
```

![](images/tidyverse2.png){.absolute bottom="0" right="0" height="50%"}

::: fragment
-   Or, in bulk, with the `tidyverse` package:

```{r}
#| echo: true
#| eval: false
# Install all Tidyverse packages
install.packages("tidyverse"); library(tidyverse)  #Bulk tidyverse

# List tidyverse packages
tidyverse_packages(include_self=FALSE)
```

```{r}
#| echo: false
#| eval: true
library(tidyverse)
tidyverse_packages(include_self=FALSE)
```
:::

![](images/tidyverse2.png){.absolute bottom="0" right="0" height="50%"}

## Review - Objects and Functions: {data-background="#000000" data-menu-title="Review 3 - Objects"}

::: fragment
-   Define objects > Apply functions > Repeat!
:::

::: fragment
-   Objects have a [type]{style="color:#edea2b"} and [structure]{style="color:#edea2b"}.
:::

::: fragment
::: columns
::: column
-   There are six basic types of data:

    1. Logical
    2. Double - default data type in R
    3. Integer
    4. Complex
    5. Character
    6. Factors - Integer with Character labels
:::
::: column
-   There are four basic structures:

    1. Scalar
    2. Vector
    3. Matrix
    4. Data frame (and Tibble)
:::
:::
:::

## Review - Objects and Functions: {data-background="#000000" data-menu-title="Review 3 - Functions"}

-   Define objects > Apply functions > Repeat!
![](images/tidyverse_hex.png){.absolute bottom="0" right="0" height="40%"}

::: fragment
-   Functions are used to work with objects in R.

    -   Functions (recipe) + Arguments (ingredients) = Result (meal)
:::

::: fragment
-   Functions can be user-defined, or loaded via [Packages]{style="color:#edea2b"}.
:::

::: fragment
-   Getting packages into R is a two step process:

    1. [Install]{style="color:#edea2b"} the package - do this once with `install.packages` function
    2. [Load]{style="color:#edea2b"} the package into R - do this every time with `library` function
:::

::: fragment
-   Tidyverse - collection of R packages for data science, supported by RStudio.

    -   Loaded in bulk with `tidyverse` function
:::

# Exercise {data-menu-title="Exercise"}

[Getting started with R]{style="font-size: 1.5em; text-align: center"}

## Exercise - Getting started with R {data-menu-title="Exercise1"}

-   First, try the following:

    1. Set your working directory to [R:/introduction/data]{style="color:#edea2b"}.
    2. Install and load the Tidyverse package `readr`.
    3. Using the `read_csv` function, read in [penguins.csv]{style="color:#edea2b"}.

::: fragment
-   Next, try these additional steps:

    4. Assign the [body_mass_g]{style="color:#edea2b"} variable to an object.
    5. Use this object to find the heaviest weight, using the `max` function.
:::

::: fragment
-   Finally, try the following:

    6. Assign the first 100 rows of the penguin data set to an object, using the `head` function.
    7. Write this new object to a .csv file, within the [exercise folder]{style="color:#edea2b"}.
        - Use either the `write.csv` or `write_csv` function.
        - Include your initials in the filename.
:::

:::{.absolute top="100" right="0"}    
```{r}
countdown::countdown(5L)
```
:::

## Exercise - Getting started with R {data-menu-title="Answer"}
-   How did you do?

::: {.absolute top="100" left="0" width="100%"}
::: fragment
```{r}
#| echo: true
#| eval: false
# Set working directory to data folder
setwd('R:/introduction/data')

# Install and load readr package
install.packages('readr')
library(readr)

# Load penguins data set
df <- read_csv('R:/introduction/data/penguins.csv')  # Absolute path
```
:::
:::

::: {.absolute top="100" left="0" width="100%"}
::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "10-15"
# Set working directory to data folder
setwd('R:/introduction/data')

# Install and load readr package
install.packages('readr')
library(readr)

# Load penguins data set
df <- read_csv('R:/introduction/data/penguins.csv')  # Absolute path

# Assign weight object
penguin_weights <- df$body_mass_g

# Get maximum weight
max(penguin_weights, na.rm=TRUE)
```
:::
:::

::: {.absolute top="100" left="0" width="100%"}
::: fragment
```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "17-20"
# Set working directory to data folder
setwd('R:/introduction/data')

# Install and load readr package
install.packages('readr')
library(readr)

# Load penguins data set
df <- read_csv('R:/introduction/data/penguins.csv')  # Absolute path

# Assign weight object
penguin_weights <- df$body_mass_g

# Get maximum weight
max(penguin_weights, na.rm=TRUE)

# Select 100 rows and write to .csv file
df_subset <- head(df,100)

write.csv(df_subset,'exercise/penguins_subset_jsm.csv')
```
:::
:::

# Topic 8 {data-menu-title="Topic 8"}

[Extras - Additional Resources]{style="font-size: 1.5em; text-align: center"}

## Topic 8: Additional Resources {data-menu-title="Additional Resources"}

::: columns
::: {.column width="60%"}
-   Upcoming workshops (*via Zoom):

    - Data wrangling with R (3/7, 3/10*)
    - Data vizualization with R (3/21, 3/24*)
    - Shiny Apps in R (3/28, 3/31*)

-   [Lehigh's R Programming Slack Channel](https://lehigh-home.slack.com/archives/C04AE4B9X0S)

::: fragment
-   External resources:
    
    - [R for Data Science - Book](https://r4ds.had.co.nz/)
    - [R for Data Science - Slack Workspace](https://rfordatascience.slack.com)
    - [RStudio Cheat Sheets](https://www.rstudio.com/resources/cheatsheets/)
    - [Twitter for R Programmers](https://www.t4rstats.com/follow-some-folks.html)
    - [LinkedIn Learning](https://www.linkedin.com/learning/search?keywords=r%20programming&u=2222241)
:::

:::
::: {.column width="40%"}

![](images/tidyverse2.png)
:::
:::